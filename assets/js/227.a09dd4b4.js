(window.webpackJsonp=window.webpackJsonp||[]).push([[227],{1167:function(s,t,a){"use strict";a.r(t);var n=a(0),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("只有我看得懂的复习笔记.Hhh")]),s._v(" "),a("h3",{attrs:{id:"类的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类的定义"}},[s._v("#")]),s._v(" 类的定义")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("定义类 类似于 "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("import")]),s._v(" 模块名"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("\n导入模块会创建一个namescope. 通过 模块名.属性名 从namescope中取属性/变量.\n同理"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v(" 从上往下运行到class定义的类代码,会开辟一个类的namescope,将类中的变量和方法/函数往namescope中丢.\n★ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("类中的代码/类体代码 在定义阶段就执行啦"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n★ 记住: 执行py文件、执行导入模块、类定义、类的实例化/类的调用、函数调用的代码时,会开辟namescope.\n       特别注意,类中函数体的代码要在函数被调用时才会执行"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n        ---------\n       "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 数据属性 ｜\n类名 --"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">|")]),s._v("        ｜\n       "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 函数属性 ｜\n        ---------  类名指向类的namescope\n查看类的namescope: 类名.__dict__\n类名.属性名 等同于 类名.__dict__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"属性名"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n★ So,对namescope的CURD的本质就是在操作字典"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v(" \n★ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("类的实例是一样的"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v(" 查看实例的namescope: 实例名.__dict__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("h3",{attrs:{id:"类的调用-类实例化对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类的调用-类实例化对象"}},[s._v("#")]),s._v(" 类的调用/类实例化对象")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("类名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("__init__的形参"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("\nstep "),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("1")]),s._v(">")]),s._v(" 造实例 \n          -- 调用类创建一个空对象/实例,会为该实例开辟一个新的namescope\nstep "),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("2")]),s._v(">")]),s._v(" 初始化实例 \n          -- 创建完实例后,该实例会自动调用类中的__init__功能的执行,并将自己作为第一个参数self的实参传入\n强调:\n   __init__是用来初始化实例的"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("为实例定制独有属性的"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(",不是造实例的\n   __init__的函数体中可以有任意代码,但唯独不能return非None的返回值\n★ 类的namescope是实例们共享的"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n  实例的namescope中只有自个儿独有的属性,只有自己看得见\n★ 类的实例化对象是数据与方法高度整合的产物"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h3",{attrs:{id:"属性的查找-属性引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性的查找-属性引用"}},[s._v("#")]),s._v(" 属性的查找/属性引用")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[s._v("★ 属性引用规则"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  先从对象自己的名称空间找"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 没有则去类"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("类"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("父类"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("直到顶级父类Object类"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("中找\n  若都没有"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 则报错“此对象没有该属性” "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 不会去全局空间找!\n★ 类中变量引用的规则"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" 未绑定的局部变量将在全局命名空间中查找\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" 在类代码块中定义的名称的作用域"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("namescope作用范围"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("不会扩展到方法的代码块中\n     包括列表推导式和生成器表达式 \n     即作用域嵌套规则适用于LEGB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("不适用于类与类中的函数"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n     Ps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("可以通过 obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("属性 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 即属性引用的方式来进行访问\n\nf1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("m")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("234")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("f1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 0")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -- NameError: name 'Foo' is not defined")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("f1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("f2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -- 局部中没有m变量,会在全局中找")]),s._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[s._v("@staticmethod")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -- 静态方法,意味着不会自动绑定类实例化对象")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("m")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -- AttributeError: type object 'Foo' has no attribute 'a'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -- AttributeError: 'Foo' object has no attribute 'a'")]),s._v("\nFoo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("f1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -- NameError: name 'b' is not defined")]),s._v("\nFoo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("f2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 234")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 123")]),s._v("\n\n★ 这样记!! Foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("a  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("前面属于"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("变量引用"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("NameError"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("的后面属于"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("属性引用"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("AttributeError!!\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br")])]),a("h3",{attrs:{id:"绑定方法与非绑定方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#绑定方法与非绑定方法"}},[s._v("#")]),s._v(" 绑定方法与非绑定方法")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("self   @classmethod与cls   @staticmethod\n\n★ 虽然不严谨,但我们可以大胆的说: \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("1")]),s._v(">")]),s._v(" 实例方法 -- 实例对象调用  \n   类中不加装饰器的函数"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("默认"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("是绑定给实例化对象使用的 该函数必须要有个形参,约定是self\n   实例调用时会将实例自己作为函数第一个形参self的实参"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"自动传入"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("2")]),s._v(">")]),s._v(" 类方法 -- 类对象调用  \n   类中被装饰器@classmethod装饰的函数"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("约定"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("是绑定给类对象使用的 该函数必须要有个形参,约定是cls\n   类调用时会将类自己作为函数第一个形参cls的实参"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"自动传入"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("3")]),s._v(">")]),s._v(" 静态方法 -- 都可调用\n   类中被装饰器@staticmethod装饰的函数,"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("意味"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("着类对象和实例都可以调用\n   但此函数就是一个普通函数"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("调用时该函数,该函数有多少形参就对应传多少实参\n   \n▲ 何为函数何为方法?\n函数:有几个值就传几个值.\n方法:会自动传值,绑定方法、静态方法"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("严格意义上来将静态方法是函数,我们这样称呼罢了"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n★ 注意:\n类调用实例方法,就是在调用普通的函数\n实例对象调用类方法,第一个参数传入的仍然是类对象\n\n★ 打印不同对象访问类中方法属性"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("实例方法、类方法、静态方法"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("的结果:\nbound method -- 实例和类访问类方法、实例访问实例方法 -- 属性引用"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"引用的是PyMethodObject<方法对象>"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" -- 实例和类访问静态方法、类访问实例方法 -- 属性引用"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"引用的是PyFunctionObject<函数对象>"')]),s._v("\n\n★ 即"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n函数定义: PyCodeObject + def "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" PyFunctionObject"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"函数对象"')]),s._v("\n类定义:\n     有"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"self"')]),s._v("特征的PyFunctionObject 将与类实例化对象进行绑定 进化为 PyMethodObject"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"方法对象"')]),s._v("\n     有"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"@classmethod"')]),s._v("特征的PyFunctionObject 将与类对象进行绑定 进化为 PyMethodObject"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"方法对象"')]),s._v("\nPyMethodObject和PyFunctionObject在调用时进化成PyFrameObject,开辟一块命名空间,执行函数体代码.\n\nPs: 类方法的一个应用 -- 可以让类调用类方法在类方法体里完成对类的实例化"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br")])]),a("h3",{attrs:{id:"类与类型的统一"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类与类型的统一"}},[s._v("#")]),s._v(" 类与类型的统一")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("★ 在python3中统一了类与类型的概念,类就是类型 即自定义类就是自定义数据类型\n\n打印实例 -- "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("__main__.类名 object at 内存地址"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n打印类、type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("实例"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" -- "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("class "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'__main__.类名'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n\nPs: isinstance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj,cls"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 检查obj是否是类 cls 的一个实例\n    issubclass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sub, super"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 检查sub类是否是 super 类的派生类/子类\n    \n当调用a.f1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("*args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("的时候其实是调用了A.f1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a, *args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nd "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'x'")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -- 本质上是 d = dict({'x':1})  ")]),s._v("\nmy_list "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -- 本质上是 my_list = list([1, 2, 3])  my_list是类dict的一个实例")]),s._v("\n                     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    列表的append、extend等是my_list对象的实例方法!!")]),s._v("\nprint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("isinstance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("d, dict"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -- 不建议用`type(d) is dict`来判断")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("h3",{attrs:{id:"魔法方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#魔法方法"}},[s._v("#")]),s._v(" 魔法方法")]),s._v(" "),a("blockquote",[a("p",[s._v("魔法方法在类中, 某种特定条件下就会触发它的执行!")])]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[s._v("__init__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 调用类产生空的实例对象后会自动触发该方法完成对实例对象的初始化\n__new__  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 是创建这个空实例对象的方法\n__str__  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 当sel"),a("span",{pre:!0,attrs:{class:"token string-interpolation"}},[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('f"即实例对象"')])]),s._v("被打印时"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("自动触发\n__del__  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 析构方法"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("在对象被"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("del")]),s._v("删除时自动触发  可以用于手动回收系统资源\n__call__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 当对象被调用时会自动触发该方法! obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[s._v("#")]),s._v(" 继承")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[s._v("类名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("__bases__  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 列出当前类继承的所有父类"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n\n★ 组合 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 详看 对应小节的举例"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n\n菱形继承 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 新式类"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v("广度优先\n\n在子类派生出来的功能中重用父类功能的方式有两种"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" 指名道姓访问某一个类的函数"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 该方式与继承无关 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 类名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("函数名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n     eg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 前面的代码 OldboyPeople"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("__init__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" sex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n★ "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 参数一不写就是当前类"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("参数二指self所在类的mro继承链  \n\n类名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("mro"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 等同于 类名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("__mro__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h3",{attrs:{id:"多态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[s._v("#")]),s._v(" 多态")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[s._v("列表、元组、字符串 计算长度的方法都是 "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("len")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"封装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#封装"}},[s._v("#")]),s._v(" 封装")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[s._v("在属性名前面加双下划线__  在类的内部可以直接访问"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("而在类的外部无法直接访问\n因为在类定义阶段发生了一次变形 _类名__属性名 变形后的名字丢进了namescope\n应用"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 如果不想让子类的方法覆盖父类的"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 可以将该方法名前加一个__开头"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n  \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("隐藏数据属性"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" \n  让类外部的使用者通过接口来间接地操作隐藏的属性"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("在接口之上附加任意的逻辑"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("从而严格控制使用者对属性的操作!\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" 隐藏函数属性"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  在接口内去调用隐藏的功能"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("隔离了复杂度"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("用户只需要调用这个接口就可以实现一系列步骤"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n  \n对隐藏的数据属性"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("需要写接口来间接CURD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" 但我们不想改变未隐藏时的对数据属性的操作习惯"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("用"),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("property")]),s._v("装饰器!\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("property")]),s._v(" 该装饰器用于将被装饰的方法 伪装成一个数据属性\n"),a("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[s._v("@property")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 查\n"),a("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[s._v("@name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("setter")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 改\n"),a("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[s._v("@name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("deleter")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 删\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("h3",{attrs:{id:"★反射"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#★反射"}},[s._v("#")]),s._v(" ★反射")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[s._v("通过字符串来操作类或者对象的属性\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("hasattr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"xxx"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 返回"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("或者"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v("\n   不仅局限于判断 "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"xxx"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("__dict__ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("是在判断能否通过属性查找规则对该属性进行引用\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("getattr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"xxx"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"设置没找到的返回值,通常设置为None."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 不设置默认返回值,没找的话会报错.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("setattr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"age"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 等同于 p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("delattr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 等同于 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("del")]),s._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name\n\n应用场景"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 比如"),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("input")]),s._v("输入的是字符串"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("输入字符串反射到对象具体的方法上面\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h3",{attrs:{id:"元类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#元类"}},[s._v("#")]),s._v(" 元类")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("★ 详细的分析过程 直接看 元类.md 中的属性查找和模版分析 两部分内容"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n\nclass Mymeta"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -- 控制自定义类的创建过程 People = Mymeta('People',..,..)")]),s._v("\n    def __init__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self, class_name, class_bases, class_dic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -- 该self是People")]),s._v("\n        super"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Mymeta, self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(".__init__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("class_name, class_bases, class_dic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -- 控制自定义类的调用 p = People('dc',18) ")]),s._v("\n    def __call__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self, *args, **kwargs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -- 该self是People")]),s._v("\n        obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" self.__new__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        self.__init__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj, *args, **kwargs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("return")]),s._v(" obj\n\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v('"\n'),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -- 自定义类的创建过程")]),s._v("\nclass关键字对三要素进行了封装. \nPeople "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Mymate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'People'")]),s._v(","),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("object,"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(","),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 即People是Mymate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".,"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".,"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("实例化出来的\nMymate元类的调用会触发type中__call__方法的执行.\n里面有行代码 "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("self.__init__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj, *args, **kwargs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" 即Mymate.__init__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("People,*args,**kwargs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v('"\nclass People'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("object, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("metaclass")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("Mymeta"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n    def __init__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self, name, age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n        self.name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name\n        self.age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" age\n        \n元类中的三个魔法方法.      \n__new__ -- self指元类 该方法不是绑定方法\n__init__  __call__ -- self指类 \n对class_dic的操作在__new__中进行 __init__不会对class_dic进行有所操作\n创建某个实例作为类的一个属性"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("即实现单例"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("在__init__中进行 即为类创建独有的属性\n__call__ 是创建实例的 会经历 创建空对象、空对象初始化两个步骤\n\n调用类产生实例 需要执行类中的__new__方法产生一个空实例对象,再执行类中的__init__方法实现对该实例对象初始化,也就是为该实例对象定制独有的属性"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" 类比过来, 调用元类创建类,元类中的__new__方法已经实现了对类的创建, __init__是为了给创建的类添加属性"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("可以用于实现单例"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n注意,new里必须返回创建的实例,不然new返回啥,实例就变成了啥\n\nmetaclass对类操作需要在元类new里操作 \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br")])]),a("hr")])}),[],!1,null,null,null);t.default=e.exports}}]);