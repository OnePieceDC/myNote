(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{1228:function(s,a,t){"use strict";t.r(a);var n=t(0),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("blockquote",[n("p",[s._v("要搞明白的几个问题：")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("为何索引叫key.")]),s._v(" "),n("p",[s._v("primary key、unique、foreign key...")])]),s._v(" "),n("li",[n("p",[s._v("索引是如何加速查询的,它的原理是啥？")]),s._v(" "),n("p",[s._v("索引模型/结构 从二叉树--平衡二叉树--b树--b+数 每种树到底有什么问题最终演变成了b+树")])]),s._v(" "),n("li",[n("p",[s._v("为何b+数不仅能够加速等值查询还能加速范围查询(等同于多次等值查询)")])]),s._v(" "),n("li",[n("p",[s._v("什么是聚集(聚簇)索引？什么是辅助(非聚集｜非聚簇｜二级)索引?")])]),s._v(" "),n("li",[n("p",[s._v("什么情况下叫覆盖了索引.")])]),s._v(" "),n("li",[n("p",[s._v("什么情况下叫回表操作.")])]),s._v(" "),n("li",[n("p",[s._v("什么是联合索引 最左前缀匹配原则.")])]),s._v(" "),n("li",[n("p",[s._v("什么是索引下推,查询优化.")])]),s._v(" "),n("li",[n("p",[s._v("如何正确使用索引？")])])])]),s._v(" "),n("hr"),s._v(" "),n("div",{staticClass:"language-tex line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-tex"}},[n("code",[s._v("1.什么是索引？ \nmysql的数据组织方式,B+树组织结构.. innodb不支持hash\n2.为什么用索引？\n加速查询 会降低写入速度 建完后硬盘空间会变大\n3.如何做到加速的呢？(B+树是怎样的一种数据结构？)\n回答思路:\nB+树是由 二叉树、平衡二叉树、B树一路演变而来的\n不管以什么树构建索引,都分为两步 若以id字段构建索引 key-id value-本行记录;比较key值大小 构建树形结构\n若树型结构是二叉树 二叉树的两个特点？二叉树致命的缺点,可能是一根棍,右斜棍,树高度高-IO次数就高.\n平衡二叉树可以解决这一致命缺点 AVL树的特点？AVL树的缺点.. 每个节点|页|磁盘块放的只有一行内容.. 若有百万行数据,哪怕是最理想的AVL树 2^0 2^1 ... 2^20 百万级别的数据,IO次数也得20次 一次磁盘IO的影响？\nB树 每个节点放多个key-value. 打个比方,两组值的key的18,31.就有三个指针,一个指向比18小的,一个指向18到31中间的,一个指向比31大的. 在等量数据下,B树的高度是远远小于AVL树的. B树前几次IO不必要的value数据..\nB+树四大特点:\n  非叶子节点只放key值,叶子节点放key-value (相较于B树 非叶子节点固定16k的大小 可放的key值更多..指针也更多 树变矮变胖)\n  叶子节点彼此之间有双向链表的指向(范围查询变快 why?相当于多次等值查询 从根节点一路找到某一叶子节点后... B树得每次回头从根节点开始找)说不明白就举例子 where id > 3, 先找到id=4所在的叶子节点...\n  叶子里面的key值是单向链表,叶子节点之间是双向链表 全都排好序了 导致排序也很快.\n  高度为3的B+树能放千万级别的数据...演算过程..\n4.B+树索引的分类 \n  聚集索引与辅助索引的区别 id name字段举例说明\n5.覆盖了索引与回表操作 两者都是在命中了索引的前提下\n6.innodb引擎为啥叫索引组织表？一张表只能有一个主键 以主键来组织数据 若没有主键...\n7.如何正确使用索引？\n1) 索引原则:不为空且唯一占用空间小\n2) 给重复度高or占空间大的字段建立索引 等值查询速度提升不理想\n3）全表最好 分页给\n4）范围查询范围别太大 太大了就相当于等值查询了\n5）别让字段参与运算,也别用啥函数 保持字段干净\n6）其它...\n8.索引下推、联合索引、最左前缀匹配？\n索引下推 and-找里面最优的那个字段缩小范围 对or没法\n最左前缀匹配 就是一定要有最左边那个\n9.未命中索引的情况\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br")])]),n("hr"),s._v(" "),n("h2",{attrs:{id:"第1-3问题的解答如下"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第1-3问题的解答如下"}},[s._v("#")]),s._v(" 第1-3问题的解答如下:")]),s._v(" "),n("h4",{attrs:{id:"一-什么是索引"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-什么是索引"}},[s._v("#")]),s._v(" 一. 什么是索引?")]),s._v(" "),n("blockquote",[n("p",[s._v("key - 数据结构 - 索引组织数据 - B+树")]),s._v(" "),n("p",[s._v("简单理解 相当于书籍的目录.")])]),s._v(" "),n("p",[s._v("索引是mysql的一种"),n("strong",[s._v("数据结构")]),s._v(",这种数据结构称之为"),n("strong",[s._v("key")]),s._v(",大白话说索引就是一种数据的组织方式."),n("br"),s._v("\n表中的一行行数据按照索引规定的结构组织成了一种树型结构,该树叫"),n("strong",[s._v("B+树")]),s._v(".")]),s._v(" "),n("h4",{attrs:{id:"二-为何要用索引"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二-为何要用索引"}},[s._v("#")]),s._v(" 二. 为何要用索引?")]),s._v(" "),n("blockquote",[n("p",[s._v("以空间换时间")])]),s._v(" "),n("p",[s._v("优化查询速度.(读写比例"),n("strong",[s._v("10:1")]),s._v(")")]),s._v(" "),n("h4",{attrs:{id:"三-如何正确的看待索引呢"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三-如何正确的看待索引呢"}},[s._v("#")]),s._v(" 三. 如何正确的看待索引呢?")]),s._v(" "),n("blockquote",[n("p",[s._v("why卡？排查到索引上成本高.开发之初就应该加.")]),s._v(" "),n("p",[s._v("索引越多 ibd文件里的索引树越多 一个update语句导致很多树发生变化 IO效率down！")])]),s._v(" "),n("p",[n("strong",[s._v("错误的认知")])]),s._v(" "),n("ol",[n("li",[n("p",[s._v("软件上线之后,运行了一段时间,发现软件极卡(用户请求一个数据半天出不来),想到要加索引 （x）")]),s._v(" "),n("p",[s._v("慢：不是指绝对意义上的很长时间。即便某一条sql语句卡顿2-3秒也会严重影响用户体验."),n("br"),s._v("\n慢的原因：网速、程序本身、数据库...."),n("br"),s._v(" "),n("strong",[s._v("在开发软件之初就应该根据业务的理解加索引")]),s._v("(定位到常用的查询字段)."),n("br"),s._v("\n火烧眉毛再加索引,光问题定位排查到数据库上就需要耗费很长时间,成本很高！")])]),s._v(" "),n("li",[n("p",[s._v("索引越多越好. (x)")]),s._v(" "),n("p",[s._v("加索引查询 (读) 会变快,但增删改数据 (写) 的速度会变慢,因为多了一层B+树的数据结构的维护(每次操作都\n要调整整个B+树的数据结构关系)"),n("br"),s._v("\n如果某张表的ibd文件(ibd -- 数据和索引结构的文件)中创建了很多棵索引树,意味着很小的update语句会导致很多棵索引树都需要发生变化,从而硬盘的"),n("strong",[s._v("IO")]),s._v("会很高,吃不消.")])])]),s._v(" "),n("h4",{attrs:{id:"四-储备知识"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四-储备知识"}},[s._v("#")]),s._v(" 四. 储备知识")]),s._v(" "),n("h6",{attrs:{id:"_1-索引的根本原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-索引的根本原理"}},[s._v("#")]),s._v(" 1> 索引的根本原理")]),s._v(" "),n("blockquote",[n("p",[s._v("原理: 将磁盘(硬盘)的IO次数降下来.提速.")])]),s._v(" "),n("p",[s._v("[ 类比 ]:  书( 一张表); 书的一页( 表的一行); 索引( 书的目录)"),n("br"),s._v("\n所以 准确来说 是为一张表的一行行记录创建索引！(为书的一页页内容创建目录)")]),s._v(" "),n("p",[s._v("有了目录结构(索引)后,我们以后的查询都应该通过目录(索引)去查询！")]),s._v(" "),n("p",[s._v("题外话: 像什么集群架构的优化到最后都是优化IO."),n("br"),s._v("\n硬盘内存都有IO 内存IO很快不考虑, 主要是 "),n("strong",[s._v("硬盘IO和网络IO")]),s._v(".")]),s._v(" "),n("p",[s._v("因为内存的易失性(断电数据丢失) 一般情况下,我们都会选择将表中的数据和索引存储在磁盘这种外围设备中"),n("br"),s._v("\n但是和内存相比,从磁盘中读取数据的速度会慢上百倍千倍甚至万倍,所以,应当尽量减少从磁盘中读取数据的次数。")]),s._v(" "),n("h6",{attrs:{id:"_2-一次磁盘io的影响"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-一次磁盘io的影响"}},[s._v("#")]),s._v(" 2> 一次磁盘IO的影响")]),s._v(" "),n("blockquote",[n("p",[s._v("硬盘传数据到内存通过主办上的总介传输 光速！7200转/min的硬盘为例...")]),s._v(" "),n("p",[s._v("硬盘主要看找数据的时间 = avg寻道时间 + avg旋转时间 + 读写数据时间  ≈  9ms"),n("br"),s._v("\n磁臂找到磁道 - 数据在磁道某一个位置 - 读取磁盘块(多个弧段)")]),s._v(" "),n("p",[s._v("9ms? 时间长吗？一个普通的cpu可以在这段时间运行450万条命令."),n("br"),s._v("\n况且一个表中的记录成千上万, 若是 一行行的找... 每行9ms ,boom原地爆炸.")])]),s._v(" "),n("p",[s._v("固态硬盘贵. 机械硬盘 (转速越高读写越快 读写数据靠的机械运动)")]),s._v(" "),n("p",[s._v("以7200转/分钟(120转/秒)的机械硬盘为例, 做磁盘IO将硬盘的数据读到内存."),n("br"),s._v("\ncpu下发指令到硬盘,硬盘找到数据后往内存里读, 从硬盘把数据往内存读其实就是本地在主板上通过总介传输,这个速度很快几乎光速. 我们说硬盘慢是慢在找数据这一过程.(这里说的是本地 不涉及网络哈！)")]),s._v(" "),n("p",[s._v("一次磁盘IO的延迟时间'即找数据的时间' = 平均寻道时间+ 平均旋转时间+传输时间 = 9ms"),n("br"),s._v("\n     平均寻道时间: 磁臂从外到内的要划到数据所在的那个磁道上  '大概需要5ms'"),n("br"),s._v("\n     平均旋转时间: 数据在磁道那一圈的某个位置 转一圈 1/120s = 1000/120ms = 8.3ms  '半圈 4ms'"),n("br"),s._v("\n     传输时间: 指的是从磁盘读出或将数据写入磁盘的时间.一般在零点几毫秒.相对于前两个时间可以忽略不计.")]),s._v(" "),n("p",[s._v("9ms很长很长了,一个普通的cpu在9ms的时间里可以执行450万条指令.cpu可不乐意等这么久.")]),s._v(" "),n("h6",{attrs:{id:"_3-磁盘预读"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-磁盘预读"}},[s._v("#")]),s._v(" 3> 磁盘预读")]),s._v(" "),n("blockquote",[n("p",[s._v("硬盘读写基本单位 - '扇区'(磁道弧段) 512B 字节"),n("br"),s._v("\n扩展:"),n("br"),s._v("\n一个文件系统存储最小单元是块 4k (哪怕文件只有1k大小也要占4k的空间)"),n("br"),s._v("\ninnodb存储引擎的最小单元是页Page 16k  .ibd是16的整数倍")]),s._v(" "),n("p",[s._v("n*扇区 = 磁盘块\t硬盘一次IO就是读取一个磁盘块的大小到内存"),n("br"),s._v("\n那磁盘块多大呢？对于innodb引擎的数据库来说,磁盘块最大为16K！")]),s._v(" "),n("p",[s._v("简单理解：数据库的一次IO最好能读取16k的数据..."),n("br"),s._v(" "),n("font",{attrs:{color:"red"}},[s._v("Mysql一次IO大小 ｜ 硬盘一次IO大小  ==  一个磁盘块大小 ｜ Mysql一页数据大小 ｜索引树节点的大小")])],1)]),s._v(" "),n("p",[n("strong",[s._v("扇区")]),s._v("是指磁盘上划分的区域, 磁盘上的每个磁道被等分为若干个弧段, 这些弧段便是磁盘的扇区;"),n("br"),s._v(" "),n("strong",[s._v("硬盘的读写以扇区为基本单位")]),s._v(". 即扇区是磁盘存储信息的最小物理单位, 通常一个扇区的容量为512B;"),n("br"),s._v("\n多个扇区组合到一起称作为一个"),n("strong",[s._v("磁盘块")]),s._v(". \t"),n("strong",[s._v("磁盘一次IO是读取一个磁盘块到内存里面.")])]),s._v(" "),n("p",[n("strong",[s._v("一个磁盘块在数据库里称之为一页")]),s._v(". innodb存储引擎一页16k. "),n("font",{attrs:{color:"red"}},[s._v("即一次磁盘IO读16k数据到内存中.")])],1),s._v(" "),n("p",[n("strong",[s._v("预读：当一次IO时,把当前磁盘块和相邻的磁盘块都读取到内存缓冲区内.")]),s._v(" 因为局部预读性原理告诉我们,当计算机访问一个地址的数据的时候,与其相邻的数据大概路会很快被访问到。")]),s._v(" "),n("p",[s._v("题外话：理想情况肯定是挨着存的.... 这里不深纠.."),n("br"),s._v("\nA文件占3个磁盘块、B文件占4个磁盘块, C文件占3个磁盘块,依次挨着存到磁盘里很快,某一天删除了B文件,4个磁盘块就空出来了. 这时D文件来了,它需要5个磁盘块,先存满这4个磁盘块,跨过C文件再找一个磁盘块存,所以一个文件不一定是连续存的.导致磁盘的写效率就低了.")]),s._v(" "),n("h4",{attrs:{id:"五-索引的分类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五-索引的分类"}},[s._v("#")]),s._v(" 五. 索引的分类")]),s._v(" "),n("blockquote",[n("p",[s._v("B+树与Hash")]),s._v(" "),n("p",[s._v("等值查询：Hash明显有绝对的优势,只需要通过一次Hash算法就可以找到key对应的value(前提Key是唯一的.)")]),s._v(" "),n("p",[s._v("范围查询：Hash索引是无序的,哪怕原本的键值是有序的 也会被打散. 所以Hash不支持范围查询.")])]),s._v(" "),n("h6",{attrs:{id:"b-树"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#b-树"}},[s._v("#")]),s._v(" B+树！！！"),n("code",[s._v("*****")])]),s._v(" "),n("p",[s._v("等值查询和范围查询都快")]),s._v(" "),n("h6",{attrs:{id:"hash"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hash"}},[s._v("#")]),s._v(" Hash "),n("code",[s._v("***")])]),s._v(" "),n("p",[s._v("innodb不支持"),n("br"),s._v("\n等值查询快 不支持范围查询、组合查询、排序、分组..."),n("br"),s._v("\n适用场景: 离散型高 数据基数大 等值查询")]),s._v(" "),n("h6",{attrs:{id:"full-text-全文索引"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#full-text-全文索引"}},[s._v("#")]),s._v(" FULL-TEXT:全文索引")]),s._v(" "),n("p",[s._v("通过关键字的匹配来进行查询,类似于like的模糊查询"),n("br"),s._v("\nlike+%_ 在文本比较少的时比较合适,对于大量的文本数据检索会非常慢"),n("br"),s._v("\n全文索引在大量的数据面前能比like快很多,但是准确率很低"),n("br"),s._v("\n百度在搜索文章的时候使用的就是全文索引,也有可能是ES")]),s._v(" "),n("p",[s._v("全文检索通俗点就是word文档里ctrl+f查找,针对的是一篇内容很多的文档.")]),s._v(" "),n("p",[s._v("提一嘴:"),n("br"),s._v("\n默认的innodb引擎不支持我们自己去创建Hash索引,但它自己内部用到了Hash索引便于找到内存里缓存的数据。")]),s._v(" "),n("h4",{attrs:{id:"六-创建索引的两个步骤"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#六-创建索引的两个步骤"}},[s._v("#")]),s._v(" 六. 创建索引的两个步骤")]),s._v(" "),n("p",[n("code",[s._v("create index 索引名 on 表名(列名);")])]),s._v(" "),n("p",[s._v("step1: 提取索引字段每行的值当作key, value就是对应行的记录"),n("br"),s._v("\n        10 --- 10 zs      7 --- 7 ls      13 --- 13 ww      "),n("strong",[s._v("索引字段值作为键,对应的一行记录(数据)作为值")]),n("br"),s._v("\nstep2: "),n("strong",[s._v("以key值为基础比较大小")]),s._v(",生成树型结构")]),s._v(" "),n("h4",{attrs:{id:"七-b-树"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#七-b-树"}},[s._v("#")]),s._v(" 七. B+树?")]),s._v(" "),n("blockquote",[n("p",[s._v("若没有索引,等值查找某个数据,会将表中的记录挨个查询,时间复杂度为O(n)."),n("br"),s._v("\n有了索引后,索引按照 二叉树 --  平衡二叉树  -- B树'多分支AVL树' -- B+树 的数据结构逐步优化对数据的构建.")]),s._v(" "),n("p",[s._v("将数据(1条或多条记录)放到树的节点里,每读一个节点就是一次IO.")]),s._v(" "),n("p",[s._v("节点的大小"),n("br"),s._v("\n     二叉树和平衡二叉树树的节点的基本单位一般情况下是扇区(因为一条记录所占空间不够大) ？"),n("br"),s._v("\n     B树和B+树的节点的基本单位是磁盘块(理想情况下的大小是16K)")]),s._v(" "),n("p",[s._v("二叉树的结构可能就是单纯的一根斜着的棍,树的高度不够低...所以有了平衡二叉树,压低了高度.但这高度实则上也不够低,因为平衡二叉树的每个节点中只放一条记录...在海量数据面前,为了让树的高度更低,就有了B树,每个节点存放多个key-value...但B树除最后一次IO节点,其它IO节点的value并没有用到. 所以B+树非叶子节点放索引结果, 叶子节点放key-value...")]),s._v(" "),n("p",[s._v("B+数的查找有点二分法查找(排好序后..)的意思.")])]),s._v(" "),n("p",[n("font",{attrs:{color:"pink"}},[n("strong",[s._v("说明")]),s._v(": ")]),s._v(" "),n("font",{attrs:{color:"pink"}},[s._v("在下方的一系列阐述中 将树的高度跟层数两个概念混为了一谈,但对整体的理解没多大的影响. (懒得改了..Hhhh)")])],1),s._v(" "),n("h6",{attrs:{id:"二叉查找树"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二叉查找树"}},[s._v("#")]),s._v(" 二叉查找树")]),s._v(" "),n("p",[n("strong",[s._v("树的节点分为两类三种")]),s._v(":"),n("br"),s._v("\n     leaf node: 叶子节点"),n("br"),s._v("\n     non-leaf node: 根节点、树枝节点\n顶端的节点我们称为根节点, 没有子节点的节点我们称之为叶子节点, 位于中间的都称之为树枝.")]),s._v(" "),n("p",[n("img",{attrs:{src:t(519),alt:""}})]),s._v(" "),n("p",[s._v("从图中可以看到,我们为user表(用户信息表)建立了一个二叉查找树的索引"),n("br"),s._v(" "),n("strong",[s._v("二叉查找树特点")]),s._v(":"),n("br"),s._v("\n     每个节点最多有两个子节点"),n("br"),s._v("\n     任何节点的左子节点的键值都小于当前节点的键值,右子节点的键值都大于当前节点的键值"),n("br"),s._v(" "),n("font",{attrs:{size:"2",color:"gray"}},[s._v("(不纠结根节点为啥就是10 '它就是多种构建方案的其中一种结果' 重点在于只要这棵树满足二叉查询树的特点就行！！)")])],1),s._v(" "),n("p",[s._v("图中的圆为二叉查找树的节点,节点中存储了键(key)和数据(data)"),n("br"),s._v("\n     键对应user表中的id,数据对应user表中的行数据。")]),s._v(" "),n("p",[s._v("Q:  有了这个二叉树,查询效率就提高了？"),n("br"),s._v("\nA：错！一定要命中索引才行！命中索引 -- sql语句中查询条件的id对应上了某棵树的key值")]),s._v(" "),n("div",{staticClass:"language-sql line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" 利用二叉索引树的查找过程如下:\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" 根结点作为当前节点"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("把"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v("与当前节点的键值"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("比较"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("就将当前节点的右子节点作为当前节点"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" 继续把"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v("和当前节点的键值"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v("比较，发现"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v("，把当前节点的左子节点作为当前节点"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" 把"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v("和当前节点的键值"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v("对比"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("满足条件"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("从当前节点中取出"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("data")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("即id"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("name"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("xm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("最多三次就能确定结果了,跟这颗树的高度相同！若没有树,一条条的找,最多需要7次！"),n("br"),s._v(" "),n("font",{attrs:{color:"red"}},[s._v("二叉树的高度就是所需要查找的数据的最大IO次数")])],1),s._v(" "),n("p",[s._v("但二叉查询树 非常容易变成像下图 这样构建. 变成了一张链表. 若需要查找id=17的用户信息,就需要查找7次,也就相当于全表扫描了, 时间复杂度变成了O(n) 无法随机查找, 根本无法达到减少IO次数的目的."),n("br"),s._v(" "),n("strong",[s._v("高度太高导致查询效率不稳定")]),s._v("(上方的那颗树实则是二叉树的特殊情况 平衡二叉树)")]),s._v(" "),n("p",[n("img",{attrs:{src:t(520),alt:""}})]),s._v(" "),n("h6",{attrs:{id:"平衡二叉树-avl树"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#平衡二叉树-avl树"}},[s._v("#")]),s._v(" 平衡二叉树（AVL树）")]),s._v(" "),n("p",[s._v("为了解决上述问题,就需要用到平衡二叉树了。\n"),n("strong",[s._v("平衡二叉树的特点")]),s._v(": 在满足二叉查找树特性的基础上，要求"),n("strong",[s._v("每个节点的左右子树的高度差不能超过1")]),s._v("!")]),s._v(" "),n("p",[n("img",{attrs:{src:t(521),alt:""}})]),s._v(" "),n("div",{staticClass:"language-sql line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[s._v("假设 一颗平衡二叉树"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("一共"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("层"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("每个非叶子节点都有两个子节点"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n那么这棵树共有 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("31")]),s._v("个节点  等值查找 最多"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("次IO！\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("Q: 用平衡二叉树就没问题了吗？"),n("br"),s._v("\nA: No！我们创建索引的时候将索引的键值对写入硬盘, 然后mysql每次IO读取一个节点的数据到内存. 哇！诚然, 平衡二叉树相较于逐行一条条的查找可以提速. 但innodb引擎的一页数据可是可以达到16k的. 一次IO就读一条记录(几个字节)也太浪费了吧！IO次数可是取决于树的高度的！")]),s._v(" "),n("p",[s._v("这就好比于开卡车运货,为什么每辆卡车只放一个很小的货物呢？"),n("br"),s._v("\n所以不用死板,灵活些,每个节点试着多放几条数据！这就不得不提B树啦.")]),s._v(" "),n("h6",{attrs:{id:"b树"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#b树"}},[s._v("#")]),s._v(" B树")]),s._v(" "),n("p",[n("img",{attrs:{src:t(522),alt:""}})]),s._v(" "),n("p",[s._v("注意:"),n("br"),s._v("\n[1] 图中的p节点为指向子节点的指针(地址), 二叉查找树和平衡二叉树其实也有, 因为图的美观性, 被省略了"),n("br"),s._v("\n[2] "),n("strong",[s._v("一页一磁盘块一节点")]),s._v(" 三者一回事. 在mysql中数据读取的基本单位是页Page, 所以这里叫做页更符合mysql中索引的底层数据结构.")]),s._v(" "),n("p",[n("strong",[s._v("B树是一种多叉的AVL树.")])]),s._v(" "),n("p",[s._v("从上图可以看出, B树相较于平衡二叉树, 每个节点存储了更多的键值(key)和数据(data). 并且每个节点拥有更多的子节点, 上述图中的B树为3阶("),n("strong",[s._v("树中"),n("em",[s._v("节点孩子个数的最大值")]),s._v("为3")]),s._v(")B树, 高度也会更低."),n("br"),s._v("\n基于这个特性, B树相较于平衡二叉树查找数据读取磁盘的IO次数将会更少, 查找效率就会比平衡二叉树高很多。")]),s._v(" "),n("div",{staticClass:"language-sql line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[s._v("假如我们要查找id"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("28")]),s._v("的用户信息"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 那么我们在上图B树中查找的流程如下:\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" 先找到根节点也就是页"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 判断"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("28")]),s._v("在键值"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v("和"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("35")]),s._v("之间"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("那么根据页"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("中的指针p2找到页"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" 将"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("28")]),s._v("和页"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("中的键值相比较"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("28")]),s._v("在"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("26")]),s._v("和"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),s._v("之间，根据页"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("中的指针p2找到页"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" 将"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("28")]),s._v("和页"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("中的键值相比较"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 发现有匹配的键值"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("28")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 键值"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("28")]),s._v("对应的用户信息为"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("28")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("bv"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("提一个点: "),n("strong",[s._v("根节点一般是常驻内存的")]),s._v(",所以读取根节点的那一次IO就不用进行了.")]),s._v(" "),n("p",[n("font",{attrs:{color:"blue"}},[s._v("二叉树的结构可能就是单纯的一根斜着的棍,树的高度不够低...所以有了平衡二叉树,压低了高度.但这高度实则上也不够低,因为平衡二叉树的每个节点只放一条记录.在海量数据面前,为了让树的高度更低,就有了B树,每个节点存放多个key-value ... ")])],1),s._v(" "),n("p",[s._v("高度还能不能更低？"),n("br"),s._v("\n一页(一节点)大小最大是16k,里面有多条数据,每条数据由key和value组成。大胆点想, 若只要key不要value,一页是不是就能放更多条数据, 进一步压低高度?"),n("br"),s._v("\n假设查找到数据经历了三次 IO,前两次 IO 其实从磁盘读取了不必要的数据,因为只用比较 KEY,所以非叶子节点对应的 DATA 完全没有必要,如果 DATA 很大,那完全是浪费内存资源。考虑下能否把非叶子节点的 DATA 拿掉？")]),s._v(" "),n("p",[s._v("答案是肯定的,这就引出了B+树！")]),s._v(" "),n("p",[n("font",{attrs:{size:"2",color:"gray"}},[s._v("顺带提一嘴, B树的构造是有一些规定的, 但这不是这里的关注点 略. ")]),n("br"),s._v(" "),n("font",{attrs:{size:"2",color:"gray"}},[s._v("B树也是平衡的,当增加或删除数据而导致B树不平衡时, 也是需要进行节点调整的。\n")])],1),s._v(" "),n("h6",{attrs:{id:"b-树-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#b-树-2"}},[s._v("#")]),s._v(" B+树")]),s._v(" "),n("p",[n("font",{attrs:{color:"purple"}},[s._v("注意啊 页1(1) - 页2(1) - 页5(1)")])],1),s._v(" "),n("img",{attrs:{src:t(523),alt:"img"}}),s._v(" "),n("p",[n("strong",[s._v("高度更低")]),s._v(":")]),s._v(" "),n("blockquote",[n("p",[s._v("<用空间换时间> 'non-leaf node'索引结构; leaf node真正的数据"),n("br"),s._v("\n(非叶子节点和叶子节点把key索引值不止存了1遍...1.5？Hhhh)")]),s._v(" "),n("p",[s._v("相较于B树的每个节点都存储键值和数据。B+树非叶子节点上是不存储数据的, 仅存储键值, 之所以这么做是因为在数据库中页的大小是固定的，innodb中页的默认大小是16KB。"),n("br"),s._v("\n如果不存储数据，那么非叶子节点的磁盘块就能容纳更多的key值, 相应的树的阶数(节点的子节点树)就会更大'引出来的箭头就更多了' , 树就会更矮更胖, 被压扁了。如此一来我们查找数据进行磁盘的IO次数有会再次减少，数据查询的效率也会更快。")])]),s._v(" "),n("p",[n("font",{attrs:{color:"red"}},[s._v("!!!!一颗B+树能存储千万条级别的数据..")]),s._v("  推理如下:")],1),s._v(" "),n("div",{staticClass:"language-sql line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[s._v("先要晓得！数据是在叶子节点中的！！！非叶子节点是索引结构！！所以能存多少条数据是看叶子节点"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n\n若一条记录大小为"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("k"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("那么叶子节点上理论上可以放"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v("条数据"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n非叶子节点存放的"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("key")]),s._v("值和指针"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("假设主键ID为"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("bigint")]),s._v("类型"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("字节"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("指针大小在"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("innodb")]),s._v("源码里面设置是"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("字节"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n那么一组"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("key")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("指针就是"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v("字节"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v("k"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("16384")]),s._v("B"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("则非叶子节点最多能放"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("16384")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v("≈"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1170")]),s._v("条数据"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n\n若树的高度为"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("则根节点的每个指针指向一个叶子节点"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("则有"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1170")]),s._v("个叶子节点"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("一共能存"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1170")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("16384")]),s._v("条数据"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n若树的高度为"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("则一共能存 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1170")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1170")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("21902400")]),s._v("条数据"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" 千万级别"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n若id为"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v("类型 二千万就能变成四千万"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n\n逆推验证: 假设数据从"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("到"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("21902400")]),s._v("顺序存储"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v(".16")]),s._v("个数据为一组"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("就有"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1170")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1170")]),s._v("个叶子节点"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n每"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1170")]),s._v("个叶子节点为一组对应第二层色树枝节点"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("反过来"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("每个树枝节点里有"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1170")]),s._v("个指针"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("则有"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1170")]),s._v("个树枝节点"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n最上层的根节点有"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1170")]),s._v("个指针指向这些树枝节点"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[n("strong",[s._v("排序查找等更快")]),s._v("：")]),s._v(" "),n("blockquote",[n("p",[s._v("仔细看,\n1> B+树索引的所有数据均存储在叶子节点, 它默认帮忙排好序,是有序排列的！(B树的数据是分散在各个节点的)"),n("br"),s._v("\n2> 叶子节点之间也有指针指向！")]),s._v(" "),n("p",[s._v("这使得B+树范围查找、排序查找、分组查找以及去重查找变得异常简单."),n("br"),s._v("\nB+树等值查询也快,B树也快,等值查询不是B+树独特的优势,那B+范围查询为啥快呢？")])]),s._v(" "),n("p",[n("font",{attrs:{color:"blue"}},[s._v("范围查询锁定一个叶子节点(双向链表)后,通过叶子节点的指向往后找,不需要每次都回头再一次从根节点查找.")])],1),s._v(" "),n("div",{staticClass:"language-sql line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("user")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" id"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 依次找id=10的,id=11的直到id=20.")]),s._v("\n\nB"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("树: 页"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("P1 "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1<10<18'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" 页"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("P2 "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'8<10<14'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" 页"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("找到"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" 页"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" 页"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" \n\t\t 范围查询锁定一个叶子节点"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("双向链表"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("后"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("通过叶子节点的指向往后找"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("不需要每次都回头从根节点查找"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\nB树:  叶子节点没有互相的指向"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("而且数据是分散的"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("每次都需要从根节点重新开始查询"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("下图是sql语句 "),n("code",[s._v("select * from user where id>=18 and id <40")]),s._v(" 的查询过程.")]),s._v(" "),n("p",[n("img",{attrs:{src:t(524),alt:""}})]),s._v(" "),n("p",[s._v("补充：name字段能做索引吗？"),n("br"),s._v("\n能！因为字符类型的数据也能比大小.根据字符对应位置的ACSII码进行比较！eg 'abc' < 'az'")]),s._v(" "),n("hr"),s._v(" "),n("h2",{attrs:{id:"第4-9问题的解答如下"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第4-9问题的解答如下"}},[s._v("#")]),s._v(" 第4-9问题的解答如下:")]),s._v(" "),n("h4",{attrs:{id:"八-b-树索引的分类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#八-b-树索引的分类"}},[s._v("#")]),s._v(" 八. B+树索引的分类")]),s._v(" "),n("blockquote",[n("p",[s._v("注意：一张innodb存储引擎表中必须要有且只能有一个聚集索引.但是可以有多个辅助索引.")]),s._v(" "),n("p",[s._v("聚集索引 ‘一个’ 与辅助索引 ‘多个’ 比较："),n("br"),s._v("\n相同点 --- B+树结构,非叶子节点都放key,叶子节点都放key+value"),n("br"),s._v("\n不同点 --- 前者的key是主键 , 后者的key是非主键字段"),n("br"),s._v("\n                前者的value是一整行完整的记录 , 后者的value是其对应的主键字段的值")])]),s._v(" "),n("h6",{attrs:{id:"聚集索引-聚簇索引-主键索引"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#聚集索引-聚簇索引-主键索引"}},[s._v("#")]),s._v(" 聚集索引(聚簇索引｜主键索引)：")]),s._v(" "),n("blockquote",[n("p",[s._v("通常主键选择字段id, 因为id字段占的空间小并且重复度不高(一般设置id自动增长 便于比大小).以此构建出来的树的高度会非常矮.")])]),s._v(" "),n("p",[s._v("聚集索引: 以"),n("strong",[s._v("主键字段为key")]),s._v("构建的B+树, 该B+树的非叶子节点以key值构建索引树,叶子节点放的是主键值与本行完整的记录。表中的数据都聚集在叶子节点.")]),s._v(" "),n("p",[s._v("补充:"),n("br"),s._v("\n以innodb引擎创建的表(索引组织表)必须要有一个主键."),n("br"),s._v("\n若没有指定主键,会自动使用不为空且唯一的字段作为主键字段,如果没有符合条件的,Innodb引擎会自动创建一个隐藏的字段作为主键字段.(若是隐藏字段做的主键的话 此主键就不具备加速效果了)")]),s._v(" "),n("h6",{attrs:{id:"非聚集索引-非聚簇索引-辅助索引-二级索引"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#非聚集索引-非聚簇索引-辅助索引-二级索引"}},[s._v("#")]),s._v(" 非聚集索引(非聚簇索引｜辅助索引｜二级索引)")]),s._v(" "),n("p",[s._v("以 "),n("em",[n("strong",[s._v("非主键字段为key")])]),s._v(" 构建的B+树, 该B+树的"),n("strong",[s._v("叶子节点")]),s._v("放的是 "),n("em",[s._v("key值和与其对应的主键字段值")]),s._v(".")]),s._v(" "),n("h4",{attrs:{id:"九-覆盖了索引、回表操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#九-覆盖了索引、回表操作"}},[s._v("#")]),s._v(" 九. 覆盖了索引、回表操作")]),s._v(" "),n("blockquote",[n("p",[s._v("假设 主键索引 -- id字段;  辅助索引 -- name字段.")]),s._v(" "),n("p",[s._v("命中主键索引肯定覆盖了索引"),n("br"),s._v("\n命中辅助索引要看指定列是否只有辅助索引字段和主键字段. 是 覆盖了索引; 否 回表操作.")])]),s._v(" "),n("h6",{attrs:{id:"覆盖了索引"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#覆盖了索引"}},[s._v("#")]),s._v(" 覆盖了索引:")]),s._v(" "),n("blockquote",[n("p",[s._v("在命中索引的基础上, 只在本索引树的叶子节点就找到了我们想要的数据."),n("br"),s._v("\n        命中辅助索引  "),n("code",[s._v("select id,name from user where name='egon';")]),s._v("\n        命中主键索引  "),n("code",[s._v("select name,age,gender from user where id=3;")])])]),s._v(" "),n("h6",{attrs:{id:"回表操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#回表操作"}},[s._v("#")]),s._v(" 回表操作")]),s._v(" "),n("blockquote",[n("p",[n("code",[s._v("select name,age,gender from user where name='egon';")]),s._v(" (命中辅助索引)"),n("br"),s._v("\n     非聚集索引的叶子节点不存储表中的数据,而是存储该列对应的主键,想要查找数据我们还需要根据主键再去聚集索引中查找, 这个再根据聚集索引查找数据的过程, 我们称为回表."),n("br"),s._v("\n     简单来说, 在命中辅助索引的基础上,在辅助索引的叶子节点并没有找到想要的数据,需要拿着对应的主键字段去聚集索引里再找一下. eg: 树的高度是3 那么IO最大可能是6次！")])]),s._v(" "),n("h4",{attrs:{id:"十-索引管理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#十-索引管理"}},[s._v("#")]),s._v(" 十. 索引管理")]),s._v(" "),n("p",[s._v("增加删除主键 PRI、唯一UNL、普通索引MUL")]),s._v(" "),n("blockquote",[n("p",[s._v("适用场景")]),s._v(" "),n("p",[s._v("unique"),n("br"),s._v("\n需求表明某一列不能重复 eg:手机号邮箱不能重复"),n("br"),s._v("\n想让两个列加起来是唯一的,那么就创建多列联合唯一索引."),n("br"),s._v("\neg: 博客系统中的up_down推荐表. 那么user_id和article_id就适合做一个联合唯一索引. 要么赞要么踩.")]),s._v(" "),n("p",[s._v("index"),n("br"),s._v("\n一些列可能重复,比如 昵称. 想通过昵称进行搜索.加快它的速度那就做普通索引."),n("br"),s._v("\n想要几个要一起去搜索的时候.就用普通联合索引."),n("br"),s._v("\neg:  "),n("code",[s._v("select * from info where user ='**' and pwd ='**'")])])]),s._v(" "),n("h4",{attrs:{id:"十一-索引实验"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#十一-索引实验"}},[s._v("#")]),s._v(" 十一. 索引实验")]),s._v(" "),n("blockquote",[n("p",[s._v("在表中已经有大量数据的情况下,为某个字段建索引会很慢,且占用硬盘空间,建完后查询速度加快."),n("br"),s._v("\n百万行级别的数据大概需要8,9秒...甚至更久.  "),n("code",[s._v("create index idx on s1(id);")]),n("br"),s._v("\n建索引时会打乱,所以建的过程中别查？？")])]),s._v(" "),n("p",[s._v("它会扫描表中所有的数据,然后以id为数据项,创建索引结构,存放于硬盘的表中. 数据量大建索引快不了..")]),s._v(" "),n("p",[s._v("题外话: 若加索引的字段是sex字段, 哪怕命中索引查询也快不了.实际上sex字段加了索引跟没加一样."),n("br"),s._v(" "),n("code",[s._v("select count(1) from t1 where sex='男';")]),s._v("  可以参考执行计划 "),n("code",[s._v("expain")])]),s._v(" "),n("p",[n("strong",[s._v("注意:")]),n("br"),s._v("\n删除索引后ibd文件的大小并不会减小.因为mysql现目前清理不掉里面的东西.Hhhh. "),n("strong",[s._v("建索引时慎重")]),s._v("！！！"),n("br"),s._v("\n只有几个字段的300万条数据. 192M. 建完id索引后. ibd文件会变大,大概250M.")]),s._v(" "),n("h4",{attrs:{id:"十二-正确使用索引"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#十二-正确使用索引"}},[s._v("#")]),s._v(" 十二. 正确使用索引")]),s._v(" "),n("p",[n("strong",[s._v("正确使用索引  即使命中索引提速也不明显..")])]),s._v(" "),n("p",[n("code",[s._v("explain <sql语句>")]),s._v(" 结果 看key有无命中索引 看rows行数")]),s._v(" "),n("h6",{attrs:{id:"构建基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#构建基础"}},[s._v("#")]),s._v(" 构建基础")]),s._v(" "),n("blockquote",[n("p",[s._v("1> 以什么字段的值为基础构建索引?")])]),s._v(" "),n("p",[s._v("最好是不为空且唯一占用空间小的字段")]),s._v(" "),n("h6",{attrs:{id:"全表查询"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#全表查询"}},[s._v("#")]),s._v(" 全表查询")]),s._v(" "),n("blockquote",[n("p",[s._v("2> 针对全表查询语句如何优化？"),n("code",[s._v("select count(id) from s1;")])])]),s._v(" "),n("p",[s._v("应用场景: 用户想要浏览所有的商品信息"),n("br"),s._v("\n优化方案: 开发层面分页查找, 不一次性展现给用户; 缓存.")]),s._v(" "),n("h6",{attrs:{id:"等值查询"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#等值查询"}},[s._v("#")]),s._v(" 等值查询")]),s._v(" "),n("blockquote",[n("p",[s._v("3> 针对等值查询  "),n("code",[s._v("select count(id) from s1 where id = 33;")])])]),s._v(" "),n("p",[s._v("以重复度低的查询字段为基础创建索引才能加速查询！！给重复度高的字段创建索引是没有意义的!"),n("br"),s._v("\n以占用空间大的字段为基础创建索引加速效果不明显.")]),s._v(" "),n("div",{staticClass:"language-sql line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" s1 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" name "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'egon'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 300万条数据的name全是egon.")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 执行上方语句 全表扫描 1.32s")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 不管三七二十一 为name字段建立索引  5.13s")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("create")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v(" idx_name "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" s1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 再执行第一条sql语句 28.45s (´▽｀)变得很慢了耶 虽然命中索引但与全表扫描相比反而变慢了很多很多")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 因为以name创建的树 它的key全是egon. 分不清谁大谁小,就是一根棍..")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 这导致了个很有趣的现象 没有的瞬间判断出来")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" s1 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" name "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'egon'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 0.00s 瞬间判断出来了.")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" s1 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" name "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'xxxx'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 0.00s 瞬间判断出来了.")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("总结: 等值查询的优化 应该给重复度低且占用空间小的字段值为基础创建索引.")]),s._v(" "),n("h6",{attrs:{id:"范围查询"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#范围查询"}},[s._v("#")]),s._v(" 范围查询")]),s._v(" "),n("blockquote",[n("p",[s._v("4> 关于范围查询")])]),s._v(" "),n("div",{staticClass:"language-sql line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- > >= < <= != between and like")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("create")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v(" idx_id "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" s1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" form s1 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("33")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 哪怕命中了索引,也相当于对300万条数据全表扫描了")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" s1 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("33")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" id "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\nid != 33; -- 慢 是一个很大的范围\nbetween 1 and 3; -- 快 范围小\nbetween 1 and 300000; -- 慢 范围大\n*/")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*给email加索引后 等值查询变快\nemail like 'xxxx'; -- 快 like指定的是一个明确的值\nemail like 'egon3%'; -- 若以egon3开头的数据很多 就是一个很大的范围,慢 反之相反\nemail like '%xxxx'; -- 慢\n-- %尽量右边 尽量将模糊查询的条件写得完善些\n*/")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("p",[s._v("总结:"),n("br"),s._v("\n        innodb存储能加速范围查询,但是查询范围不能太大."),n("br"),s._v("\n        like 后的内容%应该往右放,并且左半部分的内容应该尽量精确")]),s._v(" "),n("h6",{attrs:{id:"字段运算"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字段运算"}},[s._v("#")]),s._v(" 字段运算")]),s._v(" "),n("blockquote",[n("p",[s._v("5> 条件字段参与运算")])]),s._v(" "),n("div",{staticClass:"language-sql line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("create")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v(" idx_mouth_salary "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" s1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mouth_salary"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查询年薪为10000的员工")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" s1 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" mouth_salary"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 索引字段id参与了计算 每次都有四则运算下")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" s1 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" mouth_salary "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 优化")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("总结: 不要让条件字段参与运算,也不要传递给某一个函数 保持字段是干净的..")]),s._v(" "),n("h6",{attrs:{id:"其它"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#其它"}},[s._v("#")]),s._v(" 其它")]),s._v(" "),n("blockquote",[n("p",[s._v("隐式转换问题:  id = 1  id=“1”")]),s._v(" "),n("p",[s._v("尽量避免使用select *    因为可能会出现回表操作")]),s._v(" "),n("p",[s._v("建表时尽可能把占用空间小的往前放 这跟底层有关")]),s._v(" "),n("p",[s._v("建议用连接(join) 来代替 子查询")]),s._v(" "),n("p",[s._v("覆盖了索引")]),s._v(" "),n("p",[s._v("慢查询日志")])]),s._v(" "),n("h4",{attrs:{id:"十三-索引下推技术"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#十三-索引下推技术"}},[s._v("#")]),s._v(" 十三. 索引下推技术")]),s._v(" "),n("p",[s._v("mysql内部优化器的一种机制.它会分析出多种执行方案.找到其中最优的方案.")]),s._v(" "),n("h6",{attrs:{id:"连续多个and"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#连续多个and"}},[s._v("#")]),s._v(" 连续多个and")]),s._v(" "),n("blockquote",[n("p",[s._v("对于连续多个and的条件, 优化器会先找出能把范围缩到最小的某一个条件'(一般是区分度高的索引字段)'.")])]),s._v(" "),n("div",{staticClass:"language-mysql line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("select count(id) from s1 where name='egon' and age=18 and gender='male';\n\n/*我们的思路: \n-- 拿到第一条记录 依次判断name、age、gender的值,若判断途中出现false就中断此次判断 再拿到第二条记录 如法炮制.*/\n\n/*优化器的思路: and连接的条件的地位都是一样的 谁先谁后判断都不要紧\n方案一: 以name字段为基础,先筛选出name='egon'的记录,筛出来后再挨个比age和gender.\n方案二: 先筛选出age='18'的记录,比name和gender\n方案二: 先筛选出gender='male'的记录,比name和age\n要知道哪怕以name为基础命中了一颗索引树,但筛选出的记录也有可能很多.\nmysql会分析这些方案,看explain执行计划,看row行数等参数..来决定用哪个.\n*/\n\n-- 举例 相亲,比如好看这属于稀有属性,我们会拿着这个稀有属性先缩小范围,然后再查\n-- where 年龄=18 and 身高 = 170 and 长相 = 好看\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("h6",{attrs:{id:"连续多个or"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#连续多个or"}},[s._v("#")]),s._v(" 连续多个or")]),s._v(" "),n("blockquote",[n("p",[s._v("对于连续多个or的条件 从左到右的顺序依次算 只要有一个条件成立此条记录就可以放行.")]),s._v(" "),n("p",[s._v("索引下推技术对此没招..")])]),s._v(" "),n("div",{staticClass:"language-sql line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" s1 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" name"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'egon'")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("or")]),s._v(" age"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("or")]),s._v(" gender"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'male'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- or锁定的是一个很大的范围.. 索引下推没招..")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 举例: 生产汽车找残次品 （错的思路- 先找轮胎坏的 再从轮胎坏的里面找方向盘坏的）这种思路是错的！！！")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- where 轮胎坏了 or 方向盘坏了 or 刹车坏了;")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h4",{attrs:{id:"十四-联合索引与最左前缀匹配原则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#十四-联合索引与最左前缀匹配原则"}},[s._v("#")]),s._v(" 十四. 联合索引与最左前缀匹配原则")]),s._v(" "),n("blockquote",[n("p",[s._v("联合索引：指对表上的各个列(多个字段)合起来做一个索引")]),s._v(" "),n("p",[s._v("最做前缀匹配：从联合索引的最左边开始匹配,一定要带最左边的那个字段！"),n("br"),s._v("\n        重复度低且占用空间较小的字段应该尽量往左放.")]),s._v(" "),n("p",[s._v("什么时候创建：条件中需要用到多个字段,并且多次查询中的多个字段都包含某一个字段."),n("br"),s._v("\n        建立联合索引后就可以优化好几种搭配的sql语句..")])]),s._v(" "),n("div",{staticClass:"language-sql line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("create")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v(" idx_id_name_gender "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" s1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("age"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- (1,egon1,18) < (2,egon2,28) 从左到右比,1<2 分胜负了,那后面的都不用比了")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\n查询条件中出现了(必须出现id),那么就命中了这个联合索引！！！:\nid name age\t;\tid name\t; id age\t; id\n若仅仅只是出现了name,则没有命中.\n*/")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 联合索引是一棵树")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* ... and连接多个条件*/")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 若给字段name、email、gender都加了索引")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" s1 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" name"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'egon'")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" email"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" gender"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'male'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 结合索引下推技术,上方的sql语句会很快")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 以后查询条件中都要带着这三name、email、gender 但也没必要为这三个字段都建立索引")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 建一个联合索引就行 结合联合索引应该把email字段放到最左端 ")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查看表结构 MUL会出现在email字段那里")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("create")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v(" idx_name "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" s1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("email"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("gender"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- where name='egon' and gender='male' and email=18; 这个最优字段email放哪无所谓..索引下推")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("h4",{attrs:{id:"补充-未命中索引"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#补充-未命中索引"}},[s._v("#")]),s._v(" 补充: 未命中索引")]),s._v(" "),n("h6",{attrs:{id:"类型不一致"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类型不一致"}},[s._v("#")]),s._v(" 类型不一致")]),s._v(" "),n("div",{staticClass:"language-sql line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- name字段是字符类型 而查询时赋值的是其它类型")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" big "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" name "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 未命中")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" big "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" email "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 未命中")]),s._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 若是主键索引 哪怕类型不一致也是很快的:id主键是整型 但这里写成字符类型也没关系")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" big "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"123"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 命中")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h6",{attrs:{id:"使用不等于"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用不等于"}},[s._v("#")]),s._v(" 使用不等于")]),s._v(" "),n("div",{staticClass:"language-sql line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" big "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" name "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"武沛齐"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 未命中")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" big "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" email "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"wupeiqi@live.com"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 未命中")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 特殊的主键：")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" big "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 命中")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h6",{attrs:{id:"or"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#or"}},[s._v("#")]),s._v(" or")]),s._v(" "),n("p",[s._v("当or条件中有未建立索引的列才失效")]),s._v(" "),n("div",{staticClass:"language-sql line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- id建了索引 password没有")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" big "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("or")]),s._v(" password"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"xx"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 未命中")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" big "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" name "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"wupeiqi"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("or")]),s._v(" password"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"xx"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 未命中")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('-- 特别的： id = 10是一坨; password="xx" and name="xx"这是另一坨')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" big "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("or")]),s._v(" password"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"xx"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" name"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"xx"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 命中")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h6",{attrs:{id:"排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#排序"}},[s._v("#")]),s._v(" 排序")]),s._v(" "),n("p",[s._v("当根据索引排序时候，选择的映射如果不是索引，则不走索引")]),s._v(" "),n("div",{staticClass:"language-sql line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 因为映射的是*全部 所以不会走索引 即使是根据索引name进行的排序")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" big "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" name "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("asc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("     "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 未命中")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" big "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" name "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("desc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 未命中")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 特别的主键：")]),s._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" big "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" id "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("desc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 命中")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h6",{attrs:{id:"like-模糊匹配"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#like-模糊匹配"}},[s._v("#")]),s._v(" like 模糊匹配")]),s._v(" "),n("div",{staticClass:"language-sql line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" big "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" name "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%u-12-19999"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 未命中")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" big "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" name "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"_u-12-19999"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 未命中")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" big "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" name "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"wu-%-10"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 未命中")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 特别的:通配符在前面中间不行 在最后可以")]),s._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" big "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" name "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"wu-1111-%"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 命中")]),s._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" big "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" name "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"wuw-%"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 命中")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h6",{attrs:{id:"使用函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用函数"}},[s._v("#")]),s._v(" 使用函数")]),s._v(" "),n("div",{staticClass:"language-sql line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" big "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" reverse"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"wupeiqi"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 未命中")]),s._v("\n\n特别的：\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" big "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" name "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" reverse"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"wupeiqi"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 命中")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h6",{attrs:{id:"最左前缀原则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#最左前缀原则"}},[s._v("#")]),s._v(" 最左前缀原则")]),s._v(" "),n("div",{staticClass:"language-sql line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 如果联合索引为：(name,password)")]),s._v("\n    name "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" password       "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 命中")]),s._v("\n    name                 \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 命中")]),s._v("\n    password                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 未命中")]),s._v("\n    name "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("or")]),s._v(" password       \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 未命中")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("PS: 慢查询,超过规定阀值未查询出来的sql语句都称为慢查询..")]),s._v(" "),n("hr")])}),[],!1,null,null,null);a.default=e.exports},519:function(s,a,t){s.exports=t.p+"assets/img/WechatIMG5.78827b75.jpeg"},520:function(s,a,t){s.exports=t.p+"assets/img/WechatIMG6.b77667ba.png"},521:function(s,a,t){s.exports=t.p+"assets/img/WechatIMG7.0fc26df8.jpeg"},522:function(s,a,t){s.exports=t.p+"assets/img/WechatIMG8.adbe6710.jpeg"},523:function(s,a,t){s.exports=t.p+"assets/img/WechatIMG9.22ca7bc7.jpeg"},524:function(s,a,t){s.exports=t.p+"assets/img/WechatIMG10.d1e257ec.jpeg"}}]);